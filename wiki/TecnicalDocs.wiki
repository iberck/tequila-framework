#summary Documentos técnicos del framework

= Introducción =

En esta página se detallan las clases utilizadas por el framework y el objetivo de cada una como fase de análisis.

= Clases =

===JProject===
Un JProject servirá para saber de donde tomar los pojos compilados (.class), además de conocer la estructura del proyecto y saber donde ubicar los archivos generados.
Se pretende manejar las estructuras de los proyectos más comerciales en los siguientes paquetes:
  {{{
  * org.tequila.jproject.AbstractJProject (Clase abstracta de la que deberán extender todos los proyectos)
  * org.tequila.jproject.NetbeansJProject
  * org.tequila.jproject.NetbeansWebJProject
  * org.tequila.jproject.NetbeansMobileJProject
  * org.tequila.jproject.EclipseJProject
  * org.tequila.jproject.IntelliJProject
  * org.tequila.jproject.MavenProject

}}}

se pretende que el spring-bean del proyecto sea algo similar al siguiente:
{{{
<bean id="nbproject" class="org.tequila.jproject.NetbeansJProject">
    <property name="path" value="c:/projectTest"/>
</bean>
}}}

===PojoWrapper=== (TODO: tal vez se podría eliminar y en el matcher solo indicar la clase)
El objetivo de esta clase es encapsular todas las propiedades del POJO(fields, nombre, etc).
Se pretende que la estructura del bean-spring sea como la siguiente:
{{{
<bean id="customer" class="org.tequila.template.datamodel.PojoWrapper">
    <property name="className" value="org.test.Customer" />
</bean>
}}}

===DynaAnnotatedPojoWrapper===
El objetivo de esta clase es encapsular todas las propiedades del POJO (fields, nombre, etc), así como un conjunto de anotaciones inyectadas en tiempo de ejecución (definidas en el archivo de configuración) para poder ser utilizadas dentro de los templates.
Se pretende que la estructura del bean-spring sea como la siguiente:
{{{
<bean id="customer" class="org.tequila.template.datamodel.DynaAnnotatedPojoWrapper">
    <property name="className" value="org.test.Customer" />
    
    <property name="annotations">
        <map>
            <entry>
                <key><value>databaseTable</value></key>
                <value>CUSTOMER</value>
            </entry> 
        </map>
    </property>
   
    <!-- equivale a:

        @(databaseTable="CUSTOMER")
        public class Customer {
           // ...
        }
    -->
</bean>
}}}


De tal forma que se puedan utilizar los objetos del pojo de la siguiente manera en la plantilla:

{{{
${pojo.fields}: Obtendrá una lista con los fields definidos en la clase
${pojo.databaseTable}: CUSTOMER
}}}

===DynaAnnotatedFieldWrapper===
El objetivo de esta clase es encapsular todas las propiedades del field (nombre y tipo), así como un conjunto de anotaciones inyectadas en tiempo de ejecución (definidas en el archivo de configuración) para poder ser utilizadas dentro de los templates.
Se pretende que la estructura del bean-spring sea como la siguiente:

{{{
<bean id="idCustomer" class="org.tequila.template.datamodel.DynaAnnotatedFieldWrapper">
    <property name="className" value="org.test.Customer" />
    <property name="fieldName" value="idCustomer" />

    <property name="annotations">
        <map>
            <entry>
                <key><value>primaryKey</value></key>
                <value>yes</value>
            </entry> 
        </map>
    </property>
   
    <!-- equivale a:

        public class Customer {
            @(primaryKey="yes")
            private int idCustomer;
            // ...
        }
    -->
</bean>
}}}